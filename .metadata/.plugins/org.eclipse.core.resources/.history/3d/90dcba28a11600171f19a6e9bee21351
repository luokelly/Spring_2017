package textExcel;
import java.util.*;
import java.io.*;

// Update this file with your own code.

public class Spreadsheet implements Grid
{
	private int rows = 20;
	private int cols = 12;
	Cell[][] cells;
	
	public Spreadsheet(){
		cells = new EmptyCell[20][12];
		for(int i = 0; i < rows; i++){
			for(int j = 0; j < cols; j++){
				cells[i][j] = new EmptyCell();
				
			}
		}
		System.out.print(this.getGridText());
	}
	public String processCommand(String command)
	{
		String[] commandArr = command.split(" ", 3);
		
		if(command.equals("")){ //return value of cell
			return command;
		}
		
		if(command.equalsIgnoreCase("")){				//test to check if valid input
			return "";
		}
		if (command.indexOf(" ") > 0){					//check to see if there are spaces to cut command options down and can safely split		//string array made with length of three
			if (commandArr.length > 1){
				if (commandArr[1].equals("=")){				//test to see if its an assignment call
					String location = commandArr[0];
					SpreadsheetLocation cellLocation = new SpreadsheetLocation(location);		//create Spreadsheetlocation instance for the entered cell
					int rowNum = cellLocation.getRow();
					int columnNum = cellLocation.getCol();
					if (commandArr[2].substring(commandArr[2].length()-1).equals("%")){		//test to see if assignment for percent cell
						cells[rowNum][columnNum] = new PercentCell(commandArr[2]);
					} else if(commandArr[2].charAt(0) == '"' && commandArr[2].charAt(commandArr[2].length()-1) == '"'){		//test to see if assignment for textcell
						cells[rowNum][columnNum] = new TextCell(commandArr[2].substring(1, commandArr[2].length()-1));
					}else if (commandArr[2].charAt(0) == '(' && commandArr[2].charAt(commandArr[2].length()-1) == ')'){		//test to see if assignment for formula cell
						cells[rowNum][columnNum] = new FormulaCell(commandArr[2]);
					}else {
						cells[rowNum][columnNum] = new ValueCell(commandArr[2]);		//last option if failed all others leads to value cell
					}
					return (getGridText());				//returns grid after assignment, as per instructions
				} else if (commandArr[0].equalsIgnoreCase("clear")){					// test to see if clear is the first word of the command and it has more than one word, as given there is a space in the entered call if it reaches this test, meaning test to see if this is a call to clear a certain value
					SpreadsheetLocation cellLocation = new SpreadsheetLocation(commandArr[1]);		//location object to easily get rows and columns of cell to be cleared
					cells[cellLocation.getRow()][cellLocation.getCol()] = new EmptyCell();
					return (getGridText());				//returns grid after assignment, as per instructions
				}else if(commandArr[0].equalsIgnoreCase("save")){
					saveFile(commandArr[1]);							// if save call, call saveFile method
				}else if(commandArr[0].equalsIgnoreCase("open")){
					return openFile(commandArr[1]);					// if reading from file, call open file method
				}
			}
		}else if (command.equalsIgnoreCase("clear")){						// if sole call is "clear" reassign each index to be empty cells
			for( int i = 0; i < cells.length; i++){
				for (int j = 0; j<cells[i].length; j++){
					cells[i][j] = new EmptyCell();
				}
			}
			return (getGridText());
		} else if(command.length() < 5){							//known that length of call of a row and column is less than 5, and safer than else statement
			SpreadsheetLocation cellLocation = new SpreadsheetLocation(command);
			return (getCell(cellLocation).fullCellText());
		}
		return "";
	}
	
	
	
	private String openFile(String filename){
		Scanner inputFile;
		try {
			inputFile = new Scanner(new File("./" + filename));
			}
		catch (FileNotFoundException e) {
			return "File not found: " + filename;
		}
		while (inputFile.hasNext()){					//when reading file, enter while loop to check if next line possible
			String[] fileInputBreakdown = inputFile.nextLine().split("," , 3);		//splits line by the commas
			SpreadsheetLocation cellLocation = new SpreadsheetLocation(fileInputBreakdown[0]);		//uses location object to simplyfy finding rows and columns
			int rowNum = cellLocation.getRow();
			int columnNum = cellLocation.getCol();
			if (fileInputBreakdown[1].equalsIgnoreCase("PercentCell")){			//test to see if type is percent cell
				cells[rowNum][columnNum] = new PercentCell((Double.parseDouble(fileInputBreakdown[2]) *100) + "");
			} else if(fileInputBreakdown[1].equalsIgnoreCase("TextCell")){			//test to see if type is text cell
				cells[rowNum][columnNum] = new TextCell(fileInputBreakdown[2].substring(1, fileInputBreakdown[2].length()-1));
			}else if (fileInputBreakdown[1].equalsIgnoreCase("FormulaCell")){			//test to see if type is formula cell
				cells[rowNum][columnNum] = new FormulaCell(fileInputBreakdown[2]);
			}else {									//can assume type is value cell, as per the instruction, files will have same csv format
				cells[rowNum][columnNum] = new ValueCell(fileInputBreakdown[2]);
			}
//			return (getGridText());	
		}
		inputFile.close();
		return (getGridText());	
		}

	private String saveFile (String filename){ 
		PrintWriter outputFile;
		try {
				outputFile = new PrintWriter(new File(filename));
		}
		catch (FileNotFoundException e) {
			return "File not found: " + filename;
		}
		for( int i = 0; i < cells.length; i++){				//for each cell in spreadsheetArr, if it is not an empty cell, print the location, type and value onto a txt file
			for (int j = 0; j<cells[i].length; j++){
				if (!(cells[i][j] instanceof EmptyCell)){
					char column = ((char) (j + 65));
					outputFile.print((column));
					outputFile.println((i + 1)  + "," + cells[i][j].fullCellText());
				}
			}
		}
		outputFile.close();
		return "";
		}
	
	
	@Override
	public int getRows()
	{
		return rows;
	}
	
	@Override
	
	public int getCols()
	{
		return cols;
	}

	public Cell getCell(Location loc)
	{
		// TODO Auto-generated method stub
		return cells[loc.getRow()][loc.getCol()];
	}

	@Override
	public String getGridText() // return entire sheet grid
	{
		String header = "   ";
		for (char i = 'A'; i <= 'L'; i++){
			header += "|" + i + "         ";	
		}
		header += "|";
		
		String whole = "\n";
		
		for (int j = 0; j < this.getRows(); j++ ){
			whole += ((j+1) + "   ").substring(0, 3);
			whole += "|";
			for (int k = 0; k < this.getCols(); k++){
				whole += cells[j][k].abbreviatedCellText() + "|";
			}			
			whole += "\n";
		}
		return header + whole;
	}

}
